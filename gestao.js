import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, collection, getDocs, doc, getDoc, updateDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

// üîπ Configura√ß√£o do Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDEwWz8aFhwYQzQmBmQR5YFUBd7vg5mJSk",
    authDomain: "nagocapoeira-6cae5.firebaseapp.com",
    projectId: "nagocapoeira-6cae5",
    storageBucket: "nagocapoeira-6cae5.appspot.com",
    messagingSenderId: "14626642245",
    appId: ""
};

// üîπ Inicializando o Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// üîπ Captura o usu√°rio do localStorage
const usuarioLogado = JSON.parse(localStorage.getItem("usuarioLogado"));

if (!usuarioLogado || !usuarioLogado.uid) {
    alert("Acesso negado! Voc√™ precisa estar autenticado.");
    window.location.href = "index.html";
}

// üîπ ALTERA√á√ÉO EM 12/03/2025 √†s 22:40
// üîπ Corre√ß√£o: Garantir que o script s√≥ rode ap√≥s o DOM estar carregado e que a tabela de pagamentos exista antes de ser manipulada.
document.addEventListener("DOMContentLoaded", function () {
    console.log("üìå Documento carregado!");

    const tabelaPagamentos = document.getElementById("tabela-pagamentos-body");
    if (!tabelaPagamentos) {
        console.error("‚ùå Erro: Elemento 'tabela-pagamentos-body' n√£o encontrado no HTML.");
        return;
    }

    console.log("‚úÖ Tabela de pagamentos encontrada, carregando dados...");
    carregarPagamentos();
});

// üîπ Verifica se o usu√°rio tem permiss√£o para acessar a p√°gina
async function verificarPermissao() {
    try {
        const usuarioRef = doc(db, "usuarios", usuarioLogado.uid);
        const usuarioSnap = await getDoc(usuarioRef);

        if (!usuarioSnap.exists()) {
            alert("Usu√°rio n√£o encontrado.");
            window.location.href = "index.html";
            return;
        }

        const dadosUsuario = usuarioSnap.data();
        const nivelUsuario = dadosUsuario.nivel || "Aluno";

        // üîπ Define os n√≠veis permitidos (mantendo os j√° definidos)
        const niveisPermitidos = ["Mestre", "Professor", "Monitor"];

        if (!niveisPermitidos.includes(nivelUsuario)) {
            alert("Acesso negado! Voc√™ n√£o tem permiss√£o para acessar esta √°rea.");
            window.location.href = "dashboard.html";
        } else {
            // üîπ Remove o bloqueio visual caso o usu√°rio seja autorizado
            document.getElementById("bloqueio").style.display = "none";
            console.log("‚úÖ Acesso permitido:", nivelUsuario);
        }
    } catch (error) {
        console.error("‚ùå Erro ao verificar permiss√£o:", error);
        alert("Erro ao verificar permiss√£o. Redirecionando...");
        window.location.href = "index.html";
    }
}

// üîπ Carregar os dados do grupo
async function carregarResumo() {
    const usuariosSnapshot = await getDocs(collection(db, "usuarios"));
    const totalAlunos = usuariosSnapshot.size;

    let totalArrecadado = 0;
    let totalDoacoes = 0;
    let totalEventos = 5; // N√∫mero fict√≠cio de eventos (depois carregamos do Firestore)

    usuariosSnapshot.forEach(async (userDoc) => {
        const pagamentosSnapshot = await getDocs(collection(db, "usuarios", userDoc.id, "pagamentos"));
        pagamentosSnapshot.forEach((pagamento) => {
            totalArrecadado += pagamento.data().valor;
        });
    });

    document.getElementById("total-alunos").textContent = totalAlunos;
    document.getElementById("total-arrecadado").textContent = totalArrecadado.toFixed(2);
    document.getElementById("total-doacoes").textContent = totalDoacoes.toFixed(2);
    document.getElementById("total-eventos").textContent = totalEventos;
}

// üîπ ALTERA√á√ÉO EM 12/03/2025 √†s 22:40
// üîπ Corre√ß√£o: Adicionado verifica√ß√£o para evitar erro ao carregar pagamentos.
async function carregarPagamentos() {
    const tabelaPagamentos = document.getElementById("tabela-pagamentos-body");

    if (!tabelaPagamentos) {
        console.error("‚ùå Erro: Elemento 'tabela-pagamentos-body' n√£o encontrado.");
        return;
    }

    tabelaPagamentos.innerHTML = "<tr><td colspan='5'>Carregando...</td></tr>";

    const usuariosSnapshot = await getDocs(collection(db, "usuarios"));

    let linhas = "";
    for (const userDoc of usuariosSnapshot.docs) {
        const pagamentosSnapshot = await getDocs(collection(db, "usuarios", userDoc.id, "pagamentos"));
        pagamentosSnapshot.forEach((pagamento) => {
            linhas += `
                <tr>
                    <td>${userDoc.data().nome}</td>
                    <td>R$ ${pagamento.data().valor.toFixed(2)}</td>
                    <td>${new Date(pagamento.data().data.toDate()).toLocaleDateString("pt-BR")}</td>
                    <td>${pagamento.data().metodo}</td>
                    <td>${pagamento.data().status}</td>
                </tr>`;
        });
    }

    tabelaPagamentos.innerHTML = linhas || "<tr><td colspan='5'>Nenhum pagamento registrado.</td></tr>";
}

// üîπ LOGOUT
document.getElementById("logout").addEventListener("click", function () {
    localStorage.removeItem("usuarioLogado");
    alert("Voc√™ saiu com sucesso!");
    window.location.href = "index.html";
});

// üîπ Executa ao carregar a p√°gina
verificarPermissao();
carregarResumo();
carregarMeusPagamentos();
carregarUsuarios();
