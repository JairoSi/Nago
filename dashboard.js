// üîπ Importando Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js";
import { getFirestore, doc, collection, addDoc, getDocs, getDoc } from "https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js";

// üîπ Configura√ß√£o do Firebase
const firebaseConfig = {
    apiKey: "AIzaSyDEwWz8aFhwYQzQmBmQR5YFUBd7vg5mJSk",
    authDomain: "nagocapoeira-6cae5.firebaseapp.com",
    projectId: "nagocapoeira-6cae5",
    storageBucket: "nagocapoeira-6cae5.appspot.com",
    messagingSenderId: "14626642245",
    appId: ""
};

// üîπ Inicializando o Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// üîπ Captura o usu√°rio do localStorage
let usuarioLogado = JSON.parse(localStorage.getItem("usuarioLogado"));

if (!usuarioLogado || !usuarioLogado.uid) {
    alert("Acesso negado! Para acessar esta √°rea, voc√™ precisa estar autenticado.");
    window.location.href = "index.html";
}

// üîπ Definir a vari√°vel antes de us√°-la no gerarCalendario()
let currentDate = new Date();

// üîπ Atualiza o n√≠vel do usu√°rio ao fazer login
async function carregarDadosUsuario() {
    try {
        const usuarioRef = doc(db, "usuarios", usuarioLogado.uid);
        const usuarioSnap = await getDoc(usuarioRef);

        if (usuarioSnap.exists()) {
            const dadosUsuario = usuarioSnap.data();
            usuarioLogado.nivel = dadosUsuario.nivel || "Aluno"; 
            localStorage.setItem("usuarioLogado", JSON.stringify(usuarioLogado));

            console.log("‚úÖ Usu√°rio atualizado:", usuarioLogado);

            document.getElementById("user-nome").textContent = usuarioLogado.nome;
            document.getElementById("user-email").textContent = usuarioLogado.email;
            document.getElementById("user-nivel").textContent = usuarioLogado.nivel;

            // üîπ Aplicar as restri√ß√µes de acesso ap√≥s carregar os dados
            aplicarRestricoesDeAcesso();
        } else {
            console.log("‚ùå Usu√°rio n√£o encontrado no Firestore.");
            alert("Erro ao carregar usu√°rio. Fa√ßa login novamente.");
            window.location.href = "index.html";
        }
    } catch (error) {
        console.error("‚ùå Erro ao carregar usu√°rio:", error);
    }
}

// üîπ Fun√ß√£o para validar n√≠vel de acesso
function aplicarRestricoesDeAcesso() {
    if (!usuarioLogado || !usuarioLogado.nivel) {
        console.error("‚ùå Erro: N√≠vel do usu√°rio n√£o encontrado.");
        return;
    }

    const nivelUsuario = usuarioLogado.nivel.toLowerCase();
    console.log("üîπ N√≠vel do usu√°rio:", nivelUsuario);

    // üîπ Se for Mestre, redireciona para a p√°gina de gest√£o
    if (nivelUsuario === "mestre") {
        console.log("üîπ Redirecionando Mestre para gestao.html...");
        window.location.href = "gestao.html";
        return;
    }

    // üîπ Oculta todas as se√ß√µes restritas por padr√£o
    document.querySelectorAll(".nivel-restrito").forEach(el => el.style.display = "none");

    // üîπ Exibe permiss√µes espec√≠ficas com base no n√≠vel
    if (nivelUsuario === "professor") {
        document.querySelectorAll(".professor").forEach(el => el.style.display = "block");
    } else if (nivelUsuario === "monitor") {
        document.querySelectorAll(".monitor").forEach(el => el.style.display = "block");
    } else if (nivelUsuario === "aluno") {
        document.querySelectorAll(".aluno").forEach(el => el.style.display = "block");
    }
}

// ===================== üîπ REGISTRAR PAGAMENTO üîπ =====================
async function registrarPagamento(valor, metodo) {
    console.log("üîπ Tentando registrar pagamento...");
    
    const usuarioId = usuarioLogado.uid;
    if (!usuarioId) {
        console.error("‚ùå Erro: Usu√°rio n√£o autenticado.");
        return;
    }

    try {
        const pagamentosRef = collection(db, "usuarios", usuarioId, "pagamentos");
        await addDoc(pagamentosRef, {
            valor: parseFloat(valor),
            data: new Date(),
            metodo: metodo,
            status: "Pendente"
        });

        console.log("‚úÖ Pagamento registrado com sucesso!");
        alert("Pagamento registrado com sucesso!");
        carregarPagamentos();
    } catch (error) {
        console.error("‚ùå Erro ao registrar pagamento:", error);
    }
}

// üîπ Capturar evento de submiss√£o do formul√°rio de pagamento
document.getElementById("form-pagamento").addEventListener("submit", function(event) {
    event.preventDefault();

    let valor = document.getElementById("valor-pagamento").value;
    let metodo = document.getElementById("tipo-pagamento").value;

    console.log("üîπ Formul√°rio enviado. Valor:", valor, "M√©todo:", metodo);

    if (!valor || !metodo) {
        alert("Preencha todos os campos antes de registrar o pagamento.");
        return;
    }

    registrarPagamento(valor, metodo);
});

// ===================== üîπ CARREGAR PAGAMENTOS üîπ =====================
async function carregarPagamentos() {
    console.log("üöÄ Buscando pagamentos do usu√°rio...");

    const usuarioId = usuarioLogado.uid;
    const pagamentosRef = collection(db, "usuarios", usuarioId, "pagamentos");
    const pagamentosSnapshot = await getDocs(pagamentosRef);

    const tabelaPagamentos = document.querySelector("#tabela-pagamentos tbody");
    tabelaPagamentos.innerHTML = "";

    if (pagamentosSnapshot.empty) {
        tabelaPagamentos.innerHTML = "<tr><td colspan='4'>Nenhum pagamento registrado.</td></tr>";
        return;
    }

    pagamentosSnapshot.forEach((doc) => {
        const pagamento = doc.data();
        const dataFormatada = pagamento.data.toDate().toLocaleDateString("pt-BR");

        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${dataFormatada}</td>
            <td>R$ ${pagamento.valor.toFixed(2)}</td>
            <td>${pagamento.metodo}</td>
            <td>${pagamento.status}</td>
        `;
        tabelaPagamentos.appendChild(row);
    });

    console.log("‚úÖ Pagamentos carregados com sucesso!");
}

// ===================== üîπ GERAR CALEND√ÅRIO üîπ =====================
async function gerarCalendario() {
    console.log("üöÄ Atualizando calend√°rio...");

    const calendarGrid = document.getElementById("calendar-grid");
    if (!calendarGrid) {
        console.error("‚ùå Erro: Elemento 'calendar-grid' n√£o encontrado.");
        return;
    }

    calendarGrid.innerHTML = "";

    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    document.getElementById("month-year").textContent = `${new Intl.DateTimeFormat('pt-BR', { month: 'long', year: 'numeric' }).format(currentDate)}`;

    const firstDay = new Date(year, month, 1).getDay();
    const daysInMonth = new Date(year, month + 1, 0).getDate();

    const pagamentosRef = collection(db, "usuarios", usuarioLogado.uid, "pagamentos");
    const pagamentosSnapshot = await getDocs(pagamentosRef);

    let pagamentos = [];
    pagamentosSnapshot.forEach(doc => {
        const dataFirestore = doc.data().data.toDate();
        const dataFormatada = dataFirestore.toLocaleDateString("pt-BR");
        pagamentos.push(dataFormatada);
    });

    for (let i = 0; i < firstDay; i++) {
        const emptyCell = document.createElement("div");
        emptyCell.classList.add("calendar-day");
        emptyCell.style.visibility = "hidden";
        calendarGrid.appendChild(emptyCell);
    }

    for (let day = 1; day <= daysInMonth; day++) {
        const dayCell = document.createElement("div");
        dayCell.classList.add("calendar-day");
        dayCell.textContent = day;

        if (pagamentos.includes(`${day}/${month + 1}/${year}`)) {
            dayCell.classList.add("pagamento");
            dayCell.innerHTML += " üí∞";
        }

        calendarGrid.appendChild(dayCell);
    }

    console.log("‚úÖ Calend√°rio atualizado com pagamentos:", pagamentos);
}

// üîπ Executa ao carregar a p√°gina
carregarDadosUsuario();
carregarPagamentos();
gerarCalendario();
